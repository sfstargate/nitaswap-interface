{"ast":null,"code":"import{useAllLists}from'state/lists/hooks';import{getVersionUpgrade,minVersionBump,VersionUpgrade}from'@uniswap/token-lists';import{useCallback,useEffect}from'react';import{useDispatch}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{useFetchListCallback}from'../../hooks/useFetchListCallback';import useInterval from'../../hooks/useInterval';import useIsWindowVisible from'../../hooks/useIsWindowVisible';import{acceptListUpdate}from'./actions';import{useActiveListUrls}from'./hooks';import{useAllInactiveTokens}from'hooks/Tokens';import{UNSUPPORTED_LIST_URLS}from'constants/lists';export default function Updater(){var _useActiveWeb3React=useActiveWeb3React(),library=_useActiveWeb3React.library;var dispatch=useDispatch();var isWindowVisible=useIsWindowVisible();// get all loaded lists, and the active urls\nvar lists=useAllLists();var activeListUrls=useActiveListUrls();// initiate loading\nuseAllInactiveTokens();var fetchList=useFetchListCallback();var fetchAllListsCallback=useCallback(function(){if(!isWindowVisible)return;Object.keys(lists).forEach(function(url){return fetchList(url).catch(function(error){return console.debug('interval list fetching error',error);});});},[fetchList,isWindowVisible,lists]);// fetch all lists every 10 minutes, but only after we initialize library\nuseInterval(fetchAllListsCallback,library?1000*60*10:null);// whenever a list is not loaded and not loading, try again to load it\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(function(error){return console.debug('list added fetching error',error);});}});},[dispatch,fetchList,library,lists]);// if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\nuseEffect(function(){Object.keys(UNSUPPORTED_LIST_URLS).forEach(function(listUrl){var list=lists[listUrl];if(!list||!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(function(error){return console.debug('list added fetching error',error);});}});},[dispatch,fetchList,library,lists]);// automatically update lists if versions are minor/patch\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(list.current&&list.pendingUpdate){var bump=getVersionUpgrade(list.current.version,list.pendingUpdate.version);switch(bump){case VersionUpgrade.NONE:throw new Error('unexpected no version bump');case VersionUpgrade.PATCH:case VersionUpgrade.MINOR:var min=minVersionBump(list.current.tokens,list.pendingUpdate.tokens);// automatically update minor/patch as long as bump matches the min update\nif(bump>=min){dispatch(acceptListUpdate(listUrl));}else{console.error(\"List at url \".concat(listUrl,\" could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR\"));}break;// update any active or inactive lists\ncase VersionUpgrade.MAJOR:dispatch(acceptListUpdate(listUrl));}}});},[dispatch,lists,activeListUrls]);return null;}","map":{"version":3,"sources":["/Users/mingtian/chain/nitaswap-interface/src/state/lists/updater.ts"],"names":["useAllLists","getVersionUpgrade","minVersionBump","VersionUpgrade","useCallback","useEffect","useDispatch","useActiveWeb3React","useFetchListCallback","useInterval","useIsWindowVisible","acceptListUpdate","useActiveListUrls","useAllInactiveTokens","UNSUPPORTED_LIST_URLS","Updater","library","dispatch","isWindowVisible","lists","activeListUrls","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","MAJOR"],"mappings":"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","sourcesContent":["import { useAllLists } from 'state/lists/hooks'\nimport { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { AppDispatch } from '../index'\nimport { acceptListUpdate } from './actions'\nimport { useActiveListUrls } from './hooks'\nimport { useAllInactiveTokens } from 'hooks/Tokens'\nimport { UNSUPPORTED_LIST_URLS } from 'constants/lists'\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n  const activeListUrls = useActiveListUrls()\n\n  // initiate loading\n  useAllInactiveTokens()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach(url =>\n      fetchList(url).catch(error => console.debug('interval list fetching error', error))\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists, activeListUrls])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}