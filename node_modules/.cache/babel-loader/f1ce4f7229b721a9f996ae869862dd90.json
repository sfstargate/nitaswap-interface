{"ast":null,"code":"import _slicedToArray from\"/Users/mingtian/chain/nitaswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{getTokenLogoURL}from'./../components/CurrencyLogo/index';import{wrappedCurrency}from'utils/wrappedCurrency';import{useCallback,useState}from'react';import{useActiveWeb3React}from'hooks';export default function useAddTokenToMetamask(currencyToAdd){var _useActiveWeb3React=useActiveWeb3React(),library=_useActiveWeb3React.library,chainId=_useActiveWeb3React.chainId;var token=wrappedCurrency(currencyToAdd,chainId);var _useState=useState(),_useState2=_slicedToArray(_useState,2),success=_useState2[0],setSuccess=_useState2[1];var addToken=useCallback(function(){if(library&&library.provider.isMetaMask&&library.provider.request&&token){library.provider.request({method:'wallet_watchAsset',params:{// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n//@ts-ignore // need this for incorrect ethers provider type\ntype:'ERC20',options:{address:token.address,symbol:token.symbol,decimals:token.decimals,image:getTokenLogoURL(token.address)}}}).then(function(success){setSuccess(success);}).catch(function(){return setSuccess(false);});}else{setSuccess(false);}},[library,token]);return{addToken:addToken,success:success};}","map":{"version":3,"sources":["/Users/mingtian/chain/nitaswap-interface/src/hooks/useAddTokenToMetamask.ts"],"names":["getTokenLogoURL","wrappedCurrency","useCallback","useState","useActiveWeb3React","useAddTokenToMetamask","currencyToAdd","library","chainId","token","success","setSuccess","addToken","provider","isMetaMask","request","method","params","type","options","address","symbol","decimals","image","then","catch"],"mappings":"+JAAA,OAASA,eAAT,KAAgC,oCAAhC,CACA,OAASC,eAAT,KAAgC,uBAAhC,CAEA,OAASC,WAAT,CAAsBC,QAAtB,KAAsC,OAAtC,CACA,OAASC,kBAAT,KAAmC,OAAnC,CAEA,cAAe,SAASC,CAAAA,qBAAT,CACbC,aADa,CAE2C,yBAC3BF,kBAAkB,EADS,CAChDG,OADgD,qBAChDA,OADgD,CACvCC,OADuC,qBACvCA,OADuC,CAGxD,GAAMC,CAAAA,KAAwB,CAAGR,eAAe,CAACK,aAAD,CAAgBE,OAAhB,CAAhD,CAHwD,cAK1BL,QAAQ,EALkB,wCAKjDO,OALiD,eAKxCC,UALwC,eAOxD,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,CAAC,UAAM,CACjC,GAAIK,OAAO,EAAIA,OAAO,CAACM,QAAR,CAAiBC,UAA5B,EAA0CP,OAAO,CAACM,QAAR,CAAiBE,OAA3D,EAAsEN,KAA1E,CAAiF,CAC/EF,OAAO,CAACM,QAAR,CACGE,OADH,CACW,CACPC,MAAM,CAAE,mBADD,CAEPC,MAAM,CAAE,CACN;AACA;AACAC,IAAI,CAAE,OAHA,CAINC,OAAO,CAAE,CACPC,OAAO,CAAEX,KAAK,CAACW,OADR,CAEPC,MAAM,CAAEZ,KAAK,CAACY,MAFP,CAGPC,QAAQ,CAAEb,KAAK,CAACa,QAHT,CAIPC,KAAK,CAAEvB,eAAe,CAACS,KAAK,CAACW,OAAP,CAJf,CAJH,CAFD,CADX,EAeGI,IAfH,CAeQ,SAAAd,OAAO,CAAI,CACfC,UAAU,CAACD,OAAD,CAAV,CACD,CAjBH,EAkBGe,KAlBH,CAkBS,iBAAMd,CAAAA,UAAU,CAAC,KAAD,CAAhB,EAlBT,EAmBD,CApBD,IAoBO,CACLA,UAAU,CAAC,KAAD,CAAV,CACD,CACF,CAxB2B,CAwBzB,CAACJ,OAAD,CAAUE,KAAV,CAxByB,CAA5B,CA0BA,MAAO,CAAEG,QAAQ,CAARA,QAAF,CAAYF,OAAO,CAAPA,OAAZ,CAAP,CACD","sourcesContent":["import { getTokenLogoURL } from './../components/CurrencyLogo/index'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { Currency, Token } from '@uniswap/sdk'\nimport { useCallback, useState } from 'react'\nimport { useActiveWeb3React } from 'hooks'\n\nexport default function useAddTokenToMetamask(\n  currencyToAdd: Currency | undefined\n): { addToken: () => void; success: boolean | undefined } {\n  const { library, chainId } = useActiveWeb3React()\n\n  const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId)\n\n  const [success, setSuccess] = useState<boolean | undefined>()\n\n  const addToken = useCallback(() => {\n    if (library && library.provider.isMetaMask && library.provider.request && token) {\n      library.provider\n        .request({\n          method: 'wallet_watchAsset',\n          params: {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            //@ts-ignore // need this for incorrect ethers provider type\n            type: 'ERC20',\n            options: {\n              address: token.address,\n              symbol: token.symbol,\n              decimals: token.decimals,\n              image: getTokenLogoURL(token.address)\n            }\n          }\n        })\n        .then(success => {\n          setSuccess(success)\n        })\n        .catch(() => setSuccess(false))\n    } else {\n      setSuccess(false)\n    }\n  }, [library, token])\n\n  return { addToken, success }\n}\n"]},"metadata":{},"sourceType":"module"}