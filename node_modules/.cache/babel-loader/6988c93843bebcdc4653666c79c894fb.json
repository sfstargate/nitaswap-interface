{"ast":null,"code":"import _toConsumableArray from\"/Users/mingtian/chain/nitaswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/mingtian/chain/nitaswap-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{isTradeBetter}from'utils/trades';import{Trade}from'@uniswap/sdk';import flatMap from'lodash.flatmap';import{useMemo}from'react';import{BASES_TO_CHECK_TRADES_AGAINST,CUSTOM_BASES,BETTER_TRADE_LESS_HOPS_THRESHOLD,ADDITIONAL_BASES}from'../constants';import{PairState,usePairs}from'../data/Reserves';import{wrappedCurrency}from'../utils/wrappedCurrency';import{useActiveWeb3React}from'./index';import{useUnsupportedTokens}from'./Tokens';import{useUserSingleHopOnly}from'state/user/hooks';function useAllCommonPairs(currencyA,currencyB){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var _ref=chainId?[wrappedCurrency(currencyA,chainId),wrappedCurrency(currencyB,chainId)]:[undefined,undefined],_ref2=_slicedToArray(_ref,2),tokenA=_ref2[0],tokenB=_ref2[1];var bases=useMemo(function(){var _BASES_TO_CHECK_TRADE,_ADDITIONAL_BASES$cha,_ADDITIONAL_BASES$cha2,_ADDITIONAL_BASES$cha3,_ADDITIONAL_BASES$cha4;if(!chainId)return[];var common=(_BASES_TO_CHECK_TRADE=BASES_TO_CHECK_TRADES_AGAINST[chainId])!==null&&_BASES_TO_CHECK_TRADE!==void 0?_BASES_TO_CHECK_TRADE:[];var additionalA=tokenA?(_ADDITIONAL_BASES$cha=(_ADDITIONAL_BASES$cha2=ADDITIONAL_BASES[chainId])===null||_ADDITIONAL_BASES$cha2===void 0?void 0:_ADDITIONAL_BASES$cha2[tokenA.address])!==null&&_ADDITIONAL_BASES$cha!==void 0?_ADDITIONAL_BASES$cha:[]:[];var additionalB=tokenB?(_ADDITIONAL_BASES$cha3=(_ADDITIONAL_BASES$cha4=ADDITIONAL_BASES[chainId])===null||_ADDITIONAL_BASES$cha4===void 0?void 0:_ADDITIONAL_BASES$cha4[tokenB.address])!==null&&_ADDITIONAL_BASES$cha3!==void 0?_ADDITIONAL_BASES$cha3:[]:[];return[].concat(_toConsumableArray(common),_toConsumableArray(additionalA),_toConsumableArray(additionalB));},[chainId,tokenA,tokenB]);var basePairs=useMemo(function(){return flatMap(bases,function(base){return bases.map(function(otherBase){return[base,otherBase];});});},[bases]);var allPairCombinations=useMemo(function(){return tokenA&&tokenB?[// the direct pair\n[tokenA,tokenB]].concat(_toConsumableArray(bases.map(function(base){return[tokenA,base];})),_toConsumableArray(bases.map(function(base){return[tokenB,base];})),_toConsumableArray(basePairs)).filter(function(tokens){return Boolean(tokens[0]&&tokens[1]);}).filter(function(_ref3){var _ref4=_slicedToArray(_ref3,2),t0=_ref4[0],t1=_ref4[1];return t0.address!==t1.address;}).filter(function(_ref5){var _ref6=_slicedToArray(_ref5,2),tokenA=_ref6[0],tokenB=_ref6[1];if(!chainId)return true;var customBases=CUSTOM_BASES[chainId];var customBasesA=customBases===null||customBases===void 0?void 0:customBases[tokenA.address];var customBasesB=customBases===null||customBases===void 0?void 0:customBases[tokenB.address];if(!customBasesA&&!customBasesB)return true;if(customBasesA&&!customBasesA.find(function(base){return tokenB.equals(base);}))return false;if(customBasesB&&!customBasesB.find(function(base){return tokenA.equals(base);}))return false;return true;}):[];},[tokenA,tokenB,bases,basePairs,chainId]);var allPairs=usePairs(allPairCombinations);// only pass along valid pairs, non-duplicated pairs\nreturn useMemo(function(){return Object.values(allPairs// filter out invalid pairs\n.filter(function(result){return Boolean(result[0]===PairState.EXISTS&&result[1]);})// filter out duplicated pairs\n.reduce(function(memo,_ref7){var _memo$curr$liquidityT;var _ref8=_slicedToArray(_ref7,2),curr=_ref8[1];memo[curr.liquidityToken.address]=(_memo$curr$liquidityT=memo[curr.liquidityToken.address])!==null&&_memo$curr$liquidityT!==void 0?_memo$curr$liquidityT:curr;return memo;},{}));},[allPairs]);}var MAX_HOPS=3;/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */export function useTradeExactIn(currencyAmountIn,currencyOut){var allowedPairs=useAllCommonPairs(currencyAmountIn===null||currencyAmountIn===void 0?void 0:currencyAmountIn.currency,currencyOut);var _useUserSingleHopOnly=useUserSingleHopOnly(),_useUserSingleHopOnly2=_slicedToArray(_useUserSingleHopOnly,1),singleHopOnly=_useUserSingleHopOnly2[0];return useMemo(function(){if(currencyAmountIn&&currencyOut&&allowedPairs.length>0){if(singleHopOnly){var _Trade$bestTradeExact;return(_Trade$bestTradeExact=Trade.bestTradeExactIn(allowedPairs,currencyAmountIn,currencyOut,{maxHops:1,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact!==void 0?_Trade$bestTradeExact:null;}// search through trades with varying hops, find best trade out of them\nvar bestTradeSoFar=null;for(var i=1;i<=MAX_HOPS;i++){var _Trade$bestTradeExact2;var currentTrade=(_Trade$bestTradeExact2=Trade.bestTradeExactIn(allowedPairs,currencyAmountIn,currencyOut,{maxHops:i,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact2!==void 0?_Trade$bestTradeExact2:null;// if current trade is best yet, save it\nif(isTradeBetter(bestTradeSoFar,currentTrade,BETTER_TRADE_LESS_HOPS_THRESHOLD)){bestTradeSoFar=currentTrade;}}return bestTradeSoFar;}return null;},[allowedPairs,currencyAmountIn,currencyOut,singleHopOnly]);}/**\n * Returns the best trade for the token in to the exact amount of token out\n */export function useTradeExactOut(currencyIn,currencyAmountOut){var allowedPairs=useAllCommonPairs(currencyIn,currencyAmountOut===null||currencyAmountOut===void 0?void 0:currencyAmountOut.currency);var _useUserSingleHopOnly3=useUserSingleHopOnly(),_useUserSingleHopOnly4=_slicedToArray(_useUserSingleHopOnly3,1),singleHopOnly=_useUserSingleHopOnly4[0];return useMemo(function(){if(currencyIn&&currencyAmountOut&&allowedPairs.length>0){if(singleHopOnly){var _Trade$bestTradeExact3;return(_Trade$bestTradeExact3=Trade.bestTradeExactOut(allowedPairs,currencyIn,currencyAmountOut,{maxHops:1,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact3!==void 0?_Trade$bestTradeExact3:null;}// search through trades with varying hops, find best trade out of them\nvar bestTradeSoFar=null;for(var i=1;i<=MAX_HOPS;i++){var _Trade$bestTradeExact4;var currentTrade=(_Trade$bestTradeExact4=Trade.bestTradeExactOut(allowedPairs,currencyIn,currencyAmountOut,{maxHops:i,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact4!==void 0?_Trade$bestTradeExact4:null;if(isTradeBetter(bestTradeSoFar,currentTrade,BETTER_TRADE_LESS_HOPS_THRESHOLD)){bestTradeSoFar=currentTrade;}}return bestTradeSoFar;}return null;},[currencyIn,currencyAmountOut,allowedPairs,singleHopOnly]);}export function useIsTransactionUnsupported(currencyIn,currencyOut){var unsupportedTokens=useUnsupportedTokens();var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var tokenIn=wrappedCurrency(currencyIn,chainId);var tokenOut=wrappedCurrency(currencyOut,chainId);// if unsupported list loaded & either token on list, mark as unsupported\nif(unsupportedTokens){if(tokenIn&&Object.keys(unsupportedTokens).includes(tokenIn.address)){return true;}if(tokenOut&&Object.keys(unsupportedTokens).includes(tokenOut.address)){return true;}}return false;}","map":{"version":3,"sources":["/Users/mingtian/chain/nitaswap-interface/src/hooks/Trades.ts"],"names":["isTradeBetter","Trade","flatMap","useMemo","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","BETTER_TRADE_LESS_HOPS_THRESHOLD","ADDITIONAL_BASES","PairState","usePairs","wrappedCurrency","useActiveWeb3React","useUnsupportedTokens","useUserSingleHopOnly","useAllCommonPairs","currencyA","currencyB","chainId","undefined","tokenA","tokenB","bases","common","additionalA","address","additionalB","basePairs","base","map","otherBase","allPairCombinations","filter","tokens","Boolean","t0","t1","customBases","customBasesA","customBasesB","find","equals","allPairs","Object","values","result","EXISTS","reduce","memo","curr","liquidityToken","MAX_HOPS","useTradeExactIn","currencyAmountIn","currencyOut","allowedPairs","currency","singleHopOnly","length","bestTradeExactIn","maxHops","maxNumResults","bestTradeSoFar","i","currentTrade","useTradeExactOut","currencyIn","currencyAmountOut","bestTradeExactOut","useIsTransactionUnsupported","unsupportedTokens","tokenIn","tokenOut","keys","includes"],"mappings":"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","sourcesContent":["import { isTradeBetter } from 'utils/trades'\nimport { Currency, CurrencyAmount, Pair, Token, Trade } from '@uniswap/sdk'\nimport flatMap from 'lodash.flatmap'\nimport { useMemo } from 'react'\n\nimport {\n  BASES_TO_CHECK_TRADES_AGAINST,\n  CUSTOM_BASES,\n  BETTER_TRADE_LESS_HOPS_THRESHOLD,\n  ADDITIONAL_BASES\n} from '../constants'\nimport { PairState, usePairs } from '../data/Reserves'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nimport { useActiveWeb3React } from './index'\nimport { useUnsupportedTokens } from './Tokens'\nimport { useUserSingleHopOnly } from 'state/user/hooks'\n\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\n  const { chainId } = useActiveWeb3React()\n\n  const [tokenA, tokenB] = chainId\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n    : [undefined, undefined]\n\n  const bases: Token[] = useMemo(() => {\n    if (!chainId) return []\n\n    const common = BASES_TO_CHECK_TRADES_AGAINST[chainId] ?? []\n    const additionalA = tokenA ? ADDITIONAL_BASES[chainId]?.[tokenA.address] ?? [] : []\n    const additionalB = tokenB ? ADDITIONAL_BASES[chainId]?.[tokenB.address] ?? [] : []\n\n    return [...common, ...additionalA, ...additionalB]\n  }, [chainId, tokenA, tokenB])\n\n  const basePairs: [Token, Token][] = useMemo(\n    () => flatMap(bases, (base): [Token, Token][] => bases.map(otherBase => [base, otherBase])),\n    [bases]\n  )\n\n  const allPairCombinations: [Token, Token][] = useMemo(\n    () =>\n      tokenA && tokenB\n        ? [\n            // the direct pair\n            [tokenA, tokenB],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs\n          ]\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n            .filter(([t0, t1]) => t0.address !== t1.address)\n            .filter(([tokenA, tokenB]) => {\n              if (!chainId) return true\n              const customBases = CUSTOM_BASES[chainId]\n\n              const customBasesA: Token[] | undefined = customBases?.[tokenA.address]\n              const customBasesB: Token[] | undefined = customBases?.[tokenB.address]\n\n              if (!customBasesA && !customBasesB) return true\n\n              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false\n              if (customBasesB && !customBasesB.find(base => tokenA.equals(base))) return false\n\n              return true\n            })\n        : [],\n    [tokenA, tokenB, bases, basePairs, chainId]\n  )\n\n  const allPairs = usePairs(allPairCombinations)\n\n  // only pass along valid pairs, non-duplicated pairs\n  return useMemo(\n    () =>\n      Object.values(\n        allPairs\n          // filter out invalid pairs\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\n          // filter out duplicated pairs\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\n            return memo\n          }, {})\n      ),\n    [allPairs]\n  )\n}\n\nconst MAX_HOPS = 3\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport function useTradeExactIn(currencyAmountIn?: CurrencyAmount, currencyOut?: Currency): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        )\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade | null = null\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade: Trade | null =\n          Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null\n        // if current trade is best yet, save it\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade\n        }\n      }\n      return bestTradeSoFar\n    }\n\n    return null\n  }, [allowedPairs, currencyAmountIn, currencyOut, singleHopOnly])\n}\n\n/**\n * Returns the best trade for the token in to the exact amount of token out\n */\nexport function useTradeExactOut(currencyIn?: Currency, currencyAmountOut?: CurrencyAmount): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency)\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  return useMemo(() => {\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\n      if (singleHopOnly) {\n        return (\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 1, maxNumResults: 1 })[0] ??\n          null\n        )\n      }\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade | null = null\n      for (let i = 1; i <= MAX_HOPS; i++) {\n        const currentTrade =\n          Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: i, maxNumResults: 1 })[0] ??\n          null\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade\n        }\n      }\n      return bestTradeSoFar\n    }\n    return null\n  }, [currencyIn, currencyAmountOut, allowedPairs, singleHopOnly])\n}\n\nexport function useIsTransactionUnsupported(currencyIn?: Currency, currencyOut?: Currency): boolean {\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n  const { chainId } = useActiveWeb3React()\n\n  const tokenIn = wrappedCurrency(currencyIn, chainId)\n  const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n  // if unsupported list loaded & either token on list, mark as unsupported\n  if (unsupportedTokens) {\n    if (tokenIn && Object.keys(unsupportedTokens).includes(tokenIn.address)) {\n      return true\n    }\n    if (tokenOut && Object.keys(unsupportedTokens).includes(tokenOut.address)) {\n      return true\n    }\n  }\n\n  return false\n}\n"]},"metadata":{},"sourceType":"module"}